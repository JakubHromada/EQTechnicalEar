@inject IJSRuntime JSRuntime

<div class="container">

    <div class="row mb-4 mt-4">
        <div class="col col-sm-12">

            <div class="mb-4 mt-2 card-wrapper">
                <div class="row d-flex align-items-center">
                    <div class="col">
                        <button class="svg-button" @onclick="ToggleAudioPlayback">
                            <svg height="900px" width="900px" viewBox="0 0 512 512" version="1.1" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                            <g id="_x37_17-_next__x2C__arrow__x2C__right_arrow__x2C__direction__x2C_">
                            <g>
                            <path d="M146.662,26.814L358.221,238.27c10.755,10.222,10.755,26.193,0,36.414L146.662,486.139" style="fill:none;stroke:@(IsPlaying ? "#FE5A5A" : "white");stroke-width:14;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:2.6131;" />
                            </g>
                            </g>
                            <g id="Layer_1" />
                            </svg>
                        </button>
                        <button class="btn btn-lg @(IsEQ ? "btn-eq btn-eq-selected" : "btn-eq")" @onclick="ToggleEq">EQ</button>
                    </div>
                </div>
            </div>
           
        </div>
    </div>

    <div class="row">
        <div class="col col-sm-12">
            <div class="mb-4 mt-2">
                <div class="practice-section-heading">
                    <h4>Frequency</h4>
                </div>
                <div class="row mb-4">
                    <div class="col col-sm-12">
                        <div class="btn-group btn-toolbar" role="group">
                            @foreach (var frequency in OneOctaveFrequencies)
                            {
                                FrequencyCount++;
                                <input type="radio" class="btn-check" name="peakingFrequencyBtnRadio" id="peakingFrequencyBtnRadio_@FrequencyCount" autocomplete="off" @onclick="(() => ApplyPeakingFilter(frequency, Gain))">
                                <label class="btn btn-lg mb-2 @(Frequency == frequency ? "btn-selected" : "btn-outline-light")" for="peakingFrequencyBtnRadio_@FrequencyCount">@frequency</label>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col col-sm-12">
            <div class="mb-4 mt-2">
                <div class="practice-section-heading">
                    <h4>Gain</h4>
                </div>
                <div class="row mb-4">
                    <div class="col col-sm-12">
                        <div class="btn-group btn-toolbar" role="group">
                            @foreach (var gain in EasyGainArray)
                            {
                                GainCount++;
                                <input type="radio" class="btn-check" name="peakingGainBtnRadio" id="peakingGainBtnRadio_@GainCount" autocomplete="off" @onclick="(() => ApplyPeakingFilter(Frequency, gain))">
                                <label class="btn btn-lg @(Gain == gain ? "btn-selected" : "btn-outline-light")" for="peakingGainBtnRadio_@GainCount">@gain dB</label>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card-wrapper {
        padding: 1rem 0.5rem;
        border-radius: 15px;
        /* background-color: #7E7E8B; */
        border: 1px #7E7E8B solid;

    }

    .btn-eq-selected {
        background-color: #FE5A5A !important;
        color: white !important;
        border-color: #373F4C !important;
    }

    .btn-eq {
        width: 4.7rem;
        height: 4.7rem;
        border-color: white !important;
        color: white !important;
    }

    .btn-selected {
        background-color: #FE5A5A !important;
        color: white !important;
    }

    .btn-eq-selected:hover {
        background-color: #FE5A5A;
    }

    .practice-section-heading {
        color: white;
        padding-bottom: 0.5rem;
    }
</style>

@code {
    private bool IsPlaying = false;
    private bool IsEQ = false;
    private int Frequency = 10;
    private int Gain = 0;
    private int MinFrequency = 10;
    private int MinGain = 0;
    private int FrequencyCount = 0;
    private int GainCount = 0;
    private List<int> OneOctaveFrequencies = new List<int> { 125, 250, 500, 1000, 2000, 4000, 8000 };
    private List<int> EasyGainArray = new List<int> { -12, -9, 9, 12 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("loadSamplesIntoBuffer");
            }
            catch (Exception ex)
            {
            }
        }
    }

    private async Task ToggleAudioPlayback()
    {
        try
        {
            if (!IsPlaying)
            {
                //only apply frequency and gain if EQ is toggled on, otherwise apply min inaudible EQ values
                var frequency = IsEQ ? Frequency : MinFrequency;
                var gain = IsEQ ? Gain : MinGain;

                await JSRuntime.InvokeVoidAsync("playAudio", frequency, gain);
                IsPlaying = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("stopAudio");
                IsPlaying = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    private async Task ApplyPeakingFilter(int frequency, int gain)
    {
        Frequency = frequency;
        Gain = gain;

        // only apply filter if the playback is on and EQ is switched on
        if (IsPlaying && IsEQ)
        {
            await JSRuntime.InvokeVoidAsync("applyPeakingFilter", frequency, gain);
        }
    }

    private async Task ToggleEq()
    {
        IsEQ = !IsEQ;
        if (IsPlaying)
        {
            var frequency = IsEQ ? Frequency : MinFrequency;
            var gain = IsEQ ? Gain : MinGain;
            await JSRuntime.InvokeVoidAsync("toggleEq", frequency, gain);
        }
    }
}
